From d5aa94b897f9152a068fa36a2a568169187cac66 Mon Sep 17 00:00:00 2001
From: Joshua Gilpatrick <unknown201@gmail.com>
Date: Thu, 6 Apr 2023 06:07:03 +0000
Subject: [PATCH] Update Install Script

---
 advanced/Scripts/COL_TABLE            |  7 ++-
 advanced/Templates/pihole-FTL.service |  3 ++
 advanced/Templates/pihole.sudo        |  2 +
 advanced/pihole-admin.conf            | 19 ++-----
 automated install/basic-install.sh    | 77 +++++++++------------------
 gravity.sh                            | 10 ++--
 pihole                                |  8 +--
 7 files changed, 48 insertions(+), 78 deletions(-)

diff --git a/advanced/Scripts/COL_TABLE b/advanced/Scripts/COL_TABLE
index 2d2b074b..8ac3635f 100644
--- a/advanced/Scripts/COL_TABLE
+++ b/advanced/Scripts/COL_TABLE
@@ -1,5 +1,10 @@
 # Determine if terminal is capable of showing colors
-if ([[ -t 1 ]] && [[ $(tput colors) -ge 8 ]]) || [[ "${WEBCALL}" ]]; then
+if command -v tput &> /dev/null; then
+  tputCommand="tput colors"
+else
+  tputCommand="echo 8"
+fi
+if ([[ -t 1 ]] && [[ $(${tputCommand}) -ge 8 ]]) || [[ "${WEBCALL}" ]]; then
   # Bold and underline may not show up on all clients
   # If something MUST be emphasized, use both
   COL_BOLD='[1m'
diff --git a/advanced/Templates/pihole-FTL.service b/advanced/Templates/pihole-FTL.service
index 460339ae..e8ad191a 100644
--- a/advanced/Templates/pihole-FTL.service
+++ b/advanced/Templates/pihole-FTL.service
@@ -114,6 +114,9 @@ case "$1" in
         stop
         start
         ;;
+  enable|disable)
+        exit 0
+        ;;
   *)
         echo "Usage: $0 {start|stop|restart|reload|status}"
         exit 1
diff --git a/advanced/Templates/pihole.sudo b/advanced/Templates/pihole.sudo
index 708309be..7505da83 100644
--- a/advanced/Templates/pihole.sudo
+++ b/advanced/Templates/pihole.sudo
@@ -7,3 +7,5 @@
 # This file is copyright under the latest version of the EUPL.
 # Please see LICENSE file for your rights under this license.
 #
+nobody ALL=NOPASSWD: /usr/bin/pihole
+Defaults secure_path = /sbin:/bin:/usr/sbin:/usr/bin
\ No newline at end of file
diff --git a/advanced/pihole-admin.conf b/advanced/pihole-admin.conf
index 0bb6eac9..4a1cf066 100644
--- a/advanced/pihole-admin.conf
+++ b/advanced/pihole-admin.conf
@@ -13,28 +13,17 @@
 ###############################################################################
 
 server.errorlog := "/var/log/lighttpd/error-pihole.log"
-
+server.username := ""
+server.groupname := ""
 $HTTP["url"] =~ "^/admin/" {
-    server.document-root = "/var/www/html"
+    server.document-root = "/www/"
     server.stream-response-body = 1
     accesslog.filename = "/var/log/lighttpd/access-pihole.log"
     accesslog.format = "%{%s}t|%h|%V|%r|%s|%b"
-
     fastcgi.server = (
         ".php" => (
             "localhost" => (
-                "socket" => "/run/lighttpd/pihole-php-fastcgi.socket",
-                "bin-path" => "/usr/bin/php-cgi",
-                "min-procs" => 1,
-                "max-procs" => 1,
-                "bin-environment" => (
-                    "PHP_FCGI_CHILDREN" => "4",
-                    "PHP_FCGI_MAX_REQUESTS" => "10000",
-                ),
-                "bin-copy-environment" => (
-                    "PATH", "SHELL", "USER"
-                ),
-                "broken-scriptfilename" => "enable",
+                "socket" => "/var/run/php8-fpm.sock",
             )
         )
     )
diff --git a/automated install/basic-install.sh b/automated install/basic-install.sh
index 24fe9e54..eaf61816 100755
--- a/automated install/basic-install.sh	
+++ b/automated install/basic-install.sh	
@@ -64,7 +64,7 @@ lighttpdConfig="/etc/lighttpd/lighttpd.conf"
 coltable="/opt/pihole/COL_TABLE"
 
 # Root of the web server
-webroot="/var/www/html"
+webroot="/www/html"
 
 
 # We clone (or update) two git repositories during the install. This helps to make sure that we always have the latest versions of the relevant files.
@@ -81,7 +81,7 @@ PI_HOLE_FILES=(chronometer list piholeDebug piholeLogFlush setupLCD update versi
 # This directory is where the Pi-hole scripts will be installed
 PI_HOLE_INSTALL_DIR="/opt/pihole"
 PI_HOLE_CONFIG_DIR="/etc/pihole"
-PI_HOLE_BIN_DIR="/usr/local/bin"
+PI_HOLE_BIN_DIR="/usr/bin"
 FTL_CONFIG_FILE="${PI_HOLE_CONFIG_DIR}/pihole-FTL.conf"
 if [ -z "$useUpdateVars" ]; then
     useUpdateVars=false
@@ -109,7 +109,7 @@ c=70
 # These are undocumented flags; some of which we can use when repairing an installation
 # The runUnattended flag is one example of this
 reconfigure=false
-runUnattended=false
+runUnattended=true
 INSTALL_WEB_SERVER=true
 # Check arguments for the undocumented flags
 for var in "$@"; do
@@ -386,12 +386,13 @@ package_manager_detect() {
         # we cannot install required packages
         printf "  %b No supported package manager found\\n" "${CROSS}"
         # so exit the installer
-        exit
+        #exit
     fi
 }
 
 # A function for checking if a directory is a git repository
 is_repo() {
+	return 0
     # Use a named, local variable instead of the vague $1, which is the first argument passed to this function
     # These local variables should always be lowercase
     local directory="${1}"
@@ -1420,14 +1421,9 @@ installConfigs() {
         fi
         # Copy the config file to include for pihole admin interface
         if [[ -d "/etc/lighttpd/conf.d" ]]; then
-            install -D -m 644 -T ${PI_HOLE_LOCAL_REPO}/advanced/pihole-admin.conf /etc/lighttpd/conf.d/pihole-admin.conf
-            if grep -q -F 'include "/etc/lighttpd/conf.d/pihole-admin.conf"' "${lighttpdConfig}"; then
-                :
-            else
-                echo 'include "/etc/lighttpd/conf.d/pihole-admin.conf"' >> "${lighttpdConfig}"
-            fi
+            install -D -m 644 -T ${PI_HOLE_LOCAL_REPO}/advanced/pihole-admin.conf /etc/lighttpd/conf.d/99-pihole-admin.conf
             # Avoid some warnings trace from lighttpd, which might break tests
-            conf=/etc/lighttpd/conf.d/pihole-admin.conf
+            conf=/etc/lighttpd/conf.d/99-pihole-admin.conf
             if lighttpd -f "${lighttpdConfig}" -tt 2>&1 | grep -q -F "WARNING: unknown config-key: dir-listing\."; then
                 echo '# Avoid some warnings trace from lighttpd, which might break tests' >> $conf
                 echo 'server.modules += ( "mod_dirlisting" )' >> $conf
@@ -1555,7 +1551,7 @@ enable_service() {
         systemctl enable "${1}" &> /dev/null
     else
         #  Otherwise, use update-rc.d to accomplish this
-        update-rc.d "${1}" defaults &> /dev/null
+        service ${1} enable &> /dev/null
     fi
     printf "%b  %b %s...\\n" "${OVER}" "${TICK}" "${str}"
 }
@@ -1571,7 +1567,7 @@ disable_service() {
         systemctl disable "${1}" &> /dev/null
     else
         # Otherwise, use update-rc.d to accomplish this
-        update-rc.d "${1}" disable &> /dev/null
+        service ${1} disable &> /dev/null
     fi
     printf "%b  %b %s...\\n" "${OVER}" "${TICK}" "${str}"
 }
@@ -1727,7 +1723,7 @@ installPiholeWeb() {
     # and copy in the pihole sudoers file
     install -m 0640 ${PI_HOLE_LOCAL_REPO}/advanced/Templates/pihole.sudo /etc/sudoers.d/pihole
     # Add lighttpd user (OS dependent) to sudoers file
-    echo "${LIGHTTPD_USER} ALL=NOPASSWD: ${PI_HOLE_BIN_DIR}/pihole" >> /etc/sudoers.d/pihole
+    #echo "${LIGHTTPD_USER} ALL=NOPASSWD: ${PI_HOLE_BIN_DIR}/pihole" >> /etc/sudoers.d/pihole
 
     # If the Web server user is lighttpd,
     if [[ "$LIGHTTPD_USER" == "lighttpd" ]]; then
@@ -1777,19 +1773,7 @@ create_pihole_user() {
             printf "  %b %s..." "${INFO}" "${str}"
             local str="Creating group 'pihole'"
             # if group can be created
-            if groupadd pihole; then
-                printf "%b  %b %s\\n" "${OVER}" "${TICK}" "${str}"
-                local str="Adding user 'pihole' to group 'pihole'"
-                printf "  %b %s..." "${INFO}" "${str}"
-                # if pihole user can be added to group pihole
-                if usermod -g pihole pihole; then
-                    printf "%b  %b %s\\n" "${OVER}" "${TICK}" "${str}"
-                else
-                    printf "%b  %b %s\\n" "${OVER}" "${CROSS}" "${str}"
-                fi
-            else
-                printf "%b  %b %s\\n" "${OVER}" "${CROSS}" "${str}"
-            fi
+
         fi
     else
         # If the pihole user doesn't exist,
@@ -1916,11 +1900,11 @@ installPihole() {
             chown ${LIGHTTPD_USER}:${LIGHTTPD_GROUP} ${webroot}
             chmod 0775 ${webroot}
             # Repair permissions if webroot is not world readable
-            chmod a+rx /var/www
+            chmod a+rx /www
             chmod a+rx ${webroot}
             # Give lighttpd access to the pihole group so the web interface can
             # manage the gravity.db database
-            usermod -a -G pihole ${LIGHTTPD_USER}
+            # usermod -a -G pihole ${LIGHTTPD_USER}
         fi
     fi
     # Install base files and web interface
@@ -2390,27 +2374,13 @@ FTLcheckUpdate() {
     local ftlLoc
     ftlLoc=$(command -v pihole-FTL 2>/dev/null)
 
-    local ftlBranch
-
-    if [[ -f "/etc/pihole/ftlbranch" ]];then
-        ftlBranch=$(</etc/pihole/ftlbranch)
-    else
-        ftlBranch="master"
-    fi
-
-    local binary
-    binary="${1}"
-
-    local remoteSha1
-    local localSha1
-
     # if dnsmasq exists and is running at this point, force reinstall of FTL Binary
     if is_command dnsmasq; then
         if check_service_active "dnsmasq";then
             return 0
         fi
     fi
-
+	return 1
     if [[ ! "${ftlBranch}" == "master" ]]; then
         #Check whether or not the binary for this FTL branch actually exists. If not, then there is no update!
         local path
@@ -2479,7 +2449,8 @@ FTLdetect() {
     printf "  %b" "${2}"
 
     if FTLcheckUpdate "${1}"; then
-        FTLinstall "${1}" || return 1
+        # FTLinstall "${1}" || return 1
+		return 0
     fi
 }
 
@@ -2498,7 +2469,7 @@ make_temporary_log() {
 copy_to_install_log() {
     # Copy the contents of file descriptor 3 into the install log
     # Since we use color codes such as '\e[1;33m', they should be removed
-    sed 's/\[[0-9;]\{1,5\}m//g' < /proc/$$/fd/3 > "${installLogLoc}"
+    sed 's/\[[0-9;]\{1,5\}m//g' < /proc/$$/fd/3 > "${installLogLoc}"
     chmod 644 "${installLogLoc}"
 }
 
@@ -2558,14 +2529,14 @@ main() {
 
     # Install packages necessary to perform os_check
     printf "  %b Checking for / installing Required dependencies for OS Check...\\n" "${INFO}"
-    install_dependent_packages "${OS_CHECK_DEPS[@]}"
+    # install_dependent_packages "${OS_CHECK_DEPS[@]}"
 
     # Check that the installed OS is officially supported - display warning if not
-    os_check
+    # os_check
 
     # Install packages used by this installation script
     printf "  %b Checking for / installing Required dependencies for this install script...\\n" "${INFO}"
-    install_dependent_packages "${INSTALLER_DEPS[@]}"
+    # install_dependent_packages "${INSTALLER_DEPS[@]}"
 
     # If the setup variable file exists,
     if [[ -f "${setupVars}" ]]; then
@@ -2620,7 +2591,7 @@ main() {
         fi
     fi
     # Download or update the scripts by updating the appropriate git repos
-    clone_or_update_repos
+    # clone_or_update_repos
 
     # Install the Core dependencies
     local dep_install_list=("${PIHOLE_DEPS[@]}")
@@ -2631,7 +2602,7 @@ main() {
 
     # Install packages used by the actual software
     printf "  %b Checking for / installing Required dependencies for Pi-hole software...\\n" "${INFO}"
-    install_dependent_packages "${dep_install_list[@]}"
+    # install_dependent_packages "${dep_install_list[@]}"
     unset dep_install_list
 
     # On some systems, lighttpd is not enabled on first install. We need to enable it here if the user
@@ -2735,10 +2706,10 @@ main() {
     restart_service pihole-FTL
 
     # Download and compile the aggregated block list
-    runGravity
+    # runGravity
 
     # Update local and remote versions via updatechecker
-    /opt/pihole/updatecheck.sh
+    #/opt/pihole/updatecheck.sh
 
     if [[ "${useUpdateVars}" == false ]]; then
         displayFinalMessage "${pw}"
diff --git a/gravity.sh b/gravity.sh
index a415aa01..d618a650 100755
--- a/gravity.sh
+++ b/gravity.sh
@@ -19,7 +19,7 @@ source "${coltable}"
 source "/etc/.pihole/advanced/Scripts/database_migration/gravity-db.sh"
 
 basename="pihole"
-PIHOLE_COMMAND="/usr/local/bin/${basename}"
+PIHOLE_COMMAND="/usr//bin/${basename}"
 
 piholeDir="/etc/${basename}"
 
@@ -165,7 +165,7 @@ database_table_from_file() {
   src="${2}"
   backup_path="${piholeDir}/migration_backup"
   backup_file="${backup_path}/$(basename "${2}")"
-  tmpFile="$(mktemp -p "${GRAVITY_TMPDIR}" --suffix=".gravity")"
+  tmpFile="$(mktemp).gravity"
 
   local timestamp
   timestamp="$(date --utc +'%s')"
@@ -438,7 +438,7 @@ gravity_DownloadBlocklists() {
     echo -e "${OVER}  ${TICK} ${str}"
   fi
 
-  target="$(mktemp -p "${GRAVITY_TMPDIR}" --suffix=".gravity")"
+  target="$(mktemp).gravity"
 
   # Use compression to reduce the amount of data that is transferred
   # between the Pi-hole and the ad list provider. Use this feature
@@ -569,7 +569,7 @@ parseList() {
   fi
 
   # For completeness, we will get a count of non_domains (this is the number of entries left after stripping the source of comments/duplicates/false positives/domains)
-  invalid_domains="$(mktemp -p "${GRAVITY_TMPDIR}" --suffix=".ph-non-domains")"
+  invalid_domains="$(mktemp).ph-non-domains"
 
   num_non_domains=$(grep -Ev "^(${valid_domain_pattern}|${abp_domain_pattern}|${false_positives})$" "${src}" | tee "${invalid_domains}" | wc -l)
 
@@ -619,7 +619,7 @@ gravity_DownloadBlocklistFromUrl() {
   local heisenbergCompensator="" listCurlBuffer str httpCode success="" ip
 
   # Create temp file to store content on disk instead of RAM
-  listCurlBuffer=$(mktemp -p "${GRAVITY_TMPDIR}" --suffix=".phgpb")
+  listCurlBuffer=$(mktemp).phgpb
 
   # Determine if $saveLocation has read permission
   if [[ -r "${saveLocation}" && $url != "file"* ]]; then
diff --git a/pihole b/pihole
index 1d9ad82c..4d4e7b3f 100755
--- a/pihole
+++ b/pihole
@@ -75,7 +75,7 @@ updatePiholeFunc() {
     unsupportedFunc
   else
     shift
-    "${PI_HOLE_SCRIPT_DIR}"/update.sh "$@"
+    #"${PI_HOLE_SCRIPT_DIR}"/update.sh "$@"
     exit 0
   fi
 }
@@ -117,7 +117,7 @@ uninstallFunc() {
 
 versionFunc() {
   shift
-  exec "${PI_HOLE_SCRIPT_DIR}"/version.sh "$@"
+  #exec "${PI_HOLE_SCRIPT_DIR}"/version.sh "$@"
 }
 
 restartDNS() {
@@ -348,7 +348,7 @@ statusFunc() {
         else
             if [[ "${1}" != "web" ]]; then
                 echo -e "  ${TICK} FTL is listening on port ${port}"
-                analyze_ports "${port}"
+                #analyze_ports "${port}"
             fi
         fi
     fi
@@ -445,7 +445,7 @@ tricorderFunc() {
 }
 
 updateCheckFunc() {
-  "${PI_HOLE_SCRIPT_DIR}"/updatecheck.sh "$@"
+  #"${PI_HOLE_SCRIPT_DIR}"/updatecheck.sh "$@"
   exit 0
 }
 
-- 
2.30.2

